#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Miraclass.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Miraclass")]
	public partial class MiraclassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertS_User(S_User instance);
    partial void UpdateS_User(S_User instance);
    partial void DeleteS_User(S_User instance);
    partial void InsertS_Menu(S_Menu instance);
    partial void UpdateS_Menu(S_Menu instance);
    partial void DeleteS_Menu(S_Menu instance);
    partial void InsertS_Group(S_Group instance);
    partial void UpdateS_Group(S_Group instance);
    partial void DeleteS_Group(S_Group instance);
    #endregion
		
		public MiraclassDataContext() : 
				base(global::Miraclass.Properties.Settings.Default.MiraclassConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MiraclassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MiraclassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MiraclassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MiraclassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<S_User> S_Users
		{
			get
			{
				return this.GetTable<S_User>();
			}
		}
		
		public System.Data.Linq.Table<S_Menu> S_Menus
		{
			get
			{
				return this.GetTable<S_Menu>();
			}
		}
		
		public System.Data.Linq.Table<S_Group> S_Groups
		{
			get
			{
				return this.GetTable<S_Group>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_User")]
	public partial class S_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _userName;
		
		private string _userPassword;
		
		private int _userGroup;
		
		private string _userFullName;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private bool _isActive;
		
		private string _Phone;
		
		private EntitySet<S_Group> _S_Groups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnuserPasswordChanging(string value);
    partial void OnuserPasswordChanged();
    partial void OnuserGroupChanging(int value);
    partial void OnuserGroupChanged();
    partial void OnuserFullNameChanging(string value);
    partial void OnuserFullNameChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public S_User()
		{
			this._S_Groups = new EntitySet<S_Group>(new Action<S_Group>(this.attach_S_Groups), new Action<S_Group>(this.detach_S_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userPassword
		{
			get
			{
				return this._userPassword;
			}
			set
			{
				if ((this._userPassword != value))
				{
					this.OnuserPasswordChanging(value);
					this.SendPropertyChanging();
					this._userPassword = value;
					this.SendPropertyChanged("userPassword");
					this.OnuserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userGroup", DbType="Int NOT NULL")]
		public int userGroup
		{
			get
			{
				return this._userGroup;
			}
			set
			{
				if ((this._userGroup != value))
				{
					this.OnuserGroupChanging(value);
					this.SendPropertyChanging();
					this._userGroup = value;
					this.SendPropertyChanged("userGroup");
					this.OnuserGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userFullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string userFullName
		{
			get
			{
				return this._userFullName;
			}
			set
			{
				if ((this._userFullName != value))
				{
					this.OnuserFullNameChanging(value);
					this.SendPropertyChanging();
					this._userFullName = value;
					this.SendPropertyChanged("userFullName");
					this.OnuserFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_S_Group", Storage="_S_Groups", ThisKey="userGroup", OtherKey="GroupId")]
		public EntitySet<S_Group> S_Groups
		{
			get
			{
				return this._S_Groups;
			}
			set
			{
				this._S_Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_S_Groups(S_Group entity)
		{
			this.SendPropertyChanging();
			entity.S_User = this;
		}
		
		private void detach_S_Groups(S_Group entity)
		{
			this.SendPropertyChanging();
			entity.S_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_Menu")]
	public partial class S_Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuId;
		
		private int _MenuLevel;
		
		private string _MenuName;
		
		private string _MenuButton;
		
		private System.Nullable<int> _MenuOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIdChanging(int value);
    partial void OnMenuIdChanged();
    partial void OnMenuLevelChanging(int value);
    partial void OnMenuLevelChanged();
    partial void OnMenuNameChanging(string value);
    partial void OnMenuNameChanged();
    partial void OnMenuButtonChanging(string value);
    partial void OnMenuButtonChanged();
    partial void OnMenuOrderChanging(System.Nullable<int> value);
    partial void OnMenuOrderChanged();
    #endregion
		
		public S_Menu()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuLevel", DbType="Int NOT NULL")]
		public int MenuLevel
		{
			get
			{
				return this._MenuLevel;
			}
			set
			{
				if ((this._MenuLevel != value))
				{
					this.OnMenuLevelChanging(value);
					this.SendPropertyChanging();
					this._MenuLevel = value;
					this.SendPropertyChanged("MenuLevel");
					this.OnMenuLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MenuName
		{
			get
			{
				return this._MenuName;
			}
			set
			{
				if ((this._MenuName != value))
				{
					this.OnMenuNameChanging(value);
					this.SendPropertyChanging();
					this._MenuName = value;
					this.SendPropertyChanged("MenuName");
					this.OnMenuNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuButton", DbType="NVarChar(50)")]
		public string MenuButton
		{
			get
			{
				return this._MenuButton;
			}
			set
			{
				if ((this._MenuButton != value))
				{
					this.OnMenuButtonChanging(value);
					this.SendPropertyChanging();
					this._MenuButton = value;
					this.SendPropertyChanged("MenuButton");
					this.OnMenuButtonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuOrder", DbType="Int")]
		public System.Nullable<int> MenuOrder
		{
			get
			{
				return this._MenuOrder;
			}
			set
			{
				if ((this._MenuOrder != value))
				{
					this.OnMenuOrderChanging(value);
					this.SendPropertyChanging();
					this._MenuOrder = value;
					this.SendPropertyChanged("MenuOrder");
					this.OnMenuOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_Group")]
	public partial class S_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _GroupName;
		
		private string _GroupDesc;
		
		private int _GroupLevel;
		
		private EntityRef<S_User> _S_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnGroupDescChanging(string value);
    partial void OnGroupDescChanged();
    partial void OnGroupLevelChanging(int value);
    partial void OnGroupLevelChanged();
    #endregion
		
		public S_Group()
		{
			this._S_User = default(EntityRef<S_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._S_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDesc", DbType="NVarChar(50)")]
		public string GroupDesc
		{
			get
			{
				return this._GroupDesc;
			}
			set
			{
				if ((this._GroupDesc != value))
				{
					this.OnGroupDescChanging(value);
					this.SendPropertyChanging();
					this._GroupDesc = value;
					this.SendPropertyChanged("GroupDesc");
					this.OnGroupDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupLevel", DbType="Int NOT NULL")]
		public int GroupLevel
		{
			get
			{
				return this._GroupLevel;
			}
			set
			{
				if ((this._GroupLevel != value))
				{
					this.OnGroupLevelChanging(value);
					this.SendPropertyChanging();
					this._GroupLevel = value;
					this.SendPropertyChanged("GroupLevel");
					this.OnGroupLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_S_Group", Storage="_S_User", ThisKey="GroupId", OtherKey="userGroup", IsForeignKey=true)]
		public S_User S_User
		{
			get
			{
				return this._S_User.Entity;
			}
			set
			{
				S_User previousValue = this._S_User.Entity;
				if (((previousValue != value) 
							|| (this._S_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_User.Entity = null;
						previousValue.S_Groups.Remove(this);
					}
					this._S_User.Entity = value;
					if ((value != null))
					{
						value.S_Groups.Add(this);
						this._GroupId = value.userGroup;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("S_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
