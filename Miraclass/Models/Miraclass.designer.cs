#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Miraclass.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Miraclass")]
	public partial class MiraclassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertS_User(S_User instance);
    partial void UpdateS_User(S_User instance);
    partial void DeleteS_User(S_User instance);
    partial void InsertP_Attendance(P_Attendance instance);
    partial void UpdateP_Attendance(P_Attendance instance);
    partial void DeleteP_Attendance(P_Attendance instance);
    partial void InsertP_Room(P_Room instance);
    partial void UpdateP_Room(P_Room instance);
    partial void DeleteP_Room(P_Room instance);
    partial void InsertP_Present(P_Present instance);
    partial void UpdateP_Present(P_Present instance);
    partial void DeleteP_Present(P_Present instance);
    partial void InsertP_data(P_data instance);
    partial void UpdateP_data(P_data instance);
    partial void DeleteP_data(P_data instance);
    partial void InsertP_linkPresent(P_linkPresent instance);
    partial void UpdateP_linkPresent(P_linkPresent instance);
    partial void DeleteP_linkPresent(P_linkPresent instance);
    partial void InsertP_StatePresent(P_StatePresent instance);
    partial void UpdateP_StatePresent(P_StatePresent instance);
    partial void DeleteP_StatePresent(P_StatePresent instance);
    partial void InsertQ_Answer(Q_Answer instance);
    partial void UpdateQ_Answer(Q_Answer instance);
    partial void DeleteQ_Answer(Q_Answer instance);
    partial void InsertQ_question(Q_question instance);
    partial void UpdateQ_question(Q_question instance);
    partial void DeleteQ_question(Q_question instance);
    partial void InsertP_request(P_request instance);
    partial void UpdateP_request(P_request instance);
    partial void DeleteP_request(P_request instance);
    partial void InsertN_savePresent(N_savePresent instance);
    partial void UpdateN_savePresent(N_savePresent instance);
    partial void DeleteN_savePresent(N_savePresent instance);
    partial void InsertN_Note(N_Note instance);
    partial void UpdateN_Note(N_Note instance);
    partial void DeleteN_Note(N_Note instance);
    #endregion
		
		public MiraclassDataContext() : 
				base(global::Miraclass.Properties.Settings.Default.MiraclassConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public MiraclassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MiraclassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MiraclassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MiraclassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<S_User> S_Users
		{
			get
			{
				return this.GetTable<S_User>();
			}
		}
		
		public System.Data.Linq.Table<P_Attendance> P_Attendances
		{
			get
			{
				return this.GetTable<P_Attendance>();
			}
		}
		
		public System.Data.Linq.Table<P_Room> P_Rooms
		{
			get
			{
				return this.GetTable<P_Room>();
			}
		}
		
		public System.Data.Linq.Table<P_Present> P_Presents
		{
			get
			{
				return this.GetTable<P_Present>();
			}
		}
		
		public System.Data.Linq.Table<P_data> P_datas
		{
			get
			{
				return this.GetTable<P_data>();
			}
		}
		
		public System.Data.Linq.Table<P_linkPresent> P_linkPresents
		{
			get
			{
				return this.GetTable<P_linkPresent>();
			}
		}
		
		public System.Data.Linq.Table<P_StatePresent> P_StatePresents
		{
			get
			{
				return this.GetTable<P_StatePresent>();
			}
		}
		
		public System.Data.Linq.Table<Q_Answer> Q_Answers
		{
			get
			{
				return this.GetTable<Q_Answer>();
			}
		}
		
		public System.Data.Linq.Table<Q_question> Q_questions
		{
			get
			{
				return this.GetTable<Q_question>();
			}
		}
		
		public System.Data.Linq.Table<P_request> P_requests
		{
			get
			{
				return this.GetTable<P_request>();
			}
		}
		
		public System.Data.Linq.Table<N_savePresent> N_savePresents
		{
			get
			{
				return this.GetTable<N_savePresent>();
			}
		}
		
		public System.Data.Linq.Table<N_Note> N_Notes
		{
			get
			{
				return this.GetTable<N_Note>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_User")]
	public partial class S_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _userName;
		
		private string _userPassword;
		
		private int _userGroup;
		
		private string _userFullName;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private bool _isActive;
		
		private string _Phone;
		
		private bool _isTeacher;
		
		private EntitySet<P_Attendance> _P_Attendances;
		
		private EntitySet<P_Present> _P_Presents;
		
		private EntitySet<Q_question> _Q_questions;
		
		private EntitySet<N_savePresent> _N_savePresents;
		
		private EntitySet<N_Note> _N_Notes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnuserPasswordChanging(string value);
    partial void OnuserPasswordChanged();
    partial void OnuserGroupChanging(int value);
    partial void OnuserGroupChanged();
    partial void OnuserFullNameChanging(string value);
    partial void OnuserFullNameChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnisTeacherChanging(bool value);
    partial void OnisTeacherChanged();
    #endregion
		
		public S_User()
		{
			this._P_Attendances = new EntitySet<P_Attendance>(new Action<P_Attendance>(this.attach_P_Attendances), new Action<P_Attendance>(this.detach_P_Attendances));
			this._P_Presents = new EntitySet<P_Present>(new Action<P_Present>(this.attach_P_Presents), new Action<P_Present>(this.detach_P_Presents));
			this._Q_questions = new EntitySet<Q_question>(new Action<Q_question>(this.attach_Q_questions), new Action<Q_question>(this.detach_Q_questions));
			this._N_savePresents = new EntitySet<N_savePresent>(new Action<N_savePresent>(this.attach_N_savePresents), new Action<N_savePresent>(this.detach_N_savePresents));
			this._N_Notes = new EntitySet<N_Note>(new Action<N_Note>(this.attach_N_Notes), new Action<N_Note>(this.detach_N_Notes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userPassword
		{
			get
			{
				return this._userPassword;
			}
			set
			{
				if ((this._userPassword != value))
				{
					this.OnuserPasswordChanging(value);
					this.SendPropertyChanging();
					this._userPassword = value;
					this.SendPropertyChanged("userPassword");
					this.OnuserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userGroup", DbType="Int NOT NULL")]
		public int userGroup
		{
			get
			{
				return this._userGroup;
			}
			set
			{
				if ((this._userGroup != value))
				{
					this.OnuserGroupChanging(value);
					this.SendPropertyChanging();
					this._userGroup = value;
					this.SendPropertyChanged("userGroup");
					this.OnuserGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userFullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string userFullName
		{
			get
			{
				return this._userFullName;
			}
			set
			{
				if ((this._userFullName != value))
				{
					this.OnuserFullNameChanging(value);
					this.SendPropertyChanging();
					this._userFullName = value;
					this.SendPropertyChanged("userFullName");
					this.OnuserFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isTeacher", DbType="Bit NOT NULL")]
		public bool isTeacher
		{
			get
			{
				return this._isTeacher;
			}
			set
			{
				if ((this._isTeacher != value))
				{
					this.OnisTeacherChanging(value);
					this.SendPropertyChanging();
					this._isTeacher = value;
					this.SendPropertyChanged("isTeacher");
					this.OnisTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_P_Attendance", Storage="_P_Attendances", ThisKey="userId", OtherKey="userId")]
		public EntitySet<P_Attendance> P_Attendances
		{
			get
			{
				return this._P_Attendances;
			}
			set
			{
				this._P_Attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_P_Present", Storage="_P_Presents", ThisKey="userId", OtherKey="ownerId")]
		public EntitySet<P_Present> P_Presents
		{
			get
			{
				return this._P_Presents;
			}
			set
			{
				this._P_Presents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_Q_question", Storage="_Q_questions", ThisKey="userId", OtherKey="userId")]
		public EntitySet<Q_question> Q_questions
		{
			get
			{
				return this._Q_questions;
			}
			set
			{
				this._Q_questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_N_savePresent", Storage="_N_savePresents", ThisKey="userId", OtherKey="userId")]
		public EntitySet<N_savePresent> N_savePresents
		{
			get
			{
				return this._N_savePresents;
			}
			set
			{
				this._N_savePresents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_N_Note", Storage="_N_Notes", ThisKey="userId", OtherKey="userId")]
		public EntitySet<N_Note> N_Notes
		{
			get
			{
				return this._N_Notes;
			}
			set
			{
				this._N_Notes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_P_Attendances(P_Attendance entity)
		{
			this.SendPropertyChanging();
			entity.S_User = this;
		}
		
		private void detach_P_Attendances(P_Attendance entity)
		{
			this.SendPropertyChanging();
			entity.S_User = null;
		}
		
		private void attach_P_Presents(P_Present entity)
		{
			this.SendPropertyChanging();
			entity.S_User = this;
		}
		
		private void detach_P_Presents(P_Present entity)
		{
			this.SendPropertyChanging();
			entity.S_User = null;
		}
		
		private void attach_Q_questions(Q_question entity)
		{
			this.SendPropertyChanging();
			entity.S_User = this;
		}
		
		private void detach_Q_questions(Q_question entity)
		{
			this.SendPropertyChanging();
			entity.S_User = null;
		}
		
		private void attach_N_savePresents(N_savePresent entity)
		{
			this.SendPropertyChanging();
			entity.S_User = this;
		}
		
		private void detach_N_savePresents(N_savePresent entity)
		{
			this.SendPropertyChanging();
			entity.S_User = null;
		}
		
		private void attach_N_Notes(N_Note entity)
		{
			this.SendPropertyChanging();
			entity.S_User = this;
		}
		
		private void detach_N_Notes(N_Note entity)
		{
			this.SendPropertyChanging();
			entity.S_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.P_Attendance")]
	public partial class P_Attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userId;
		
		private int _roomId;
		
		private EntityRef<S_User> _S_User;
		
		private EntityRef<P_Room> _P_Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    #endregion
		
		public P_Attendance()
		{
			this._S_User = default(EntityRef<S_User>);
			this._P_Room = default(EntityRef<P_Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._S_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL")]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					if (this._P_Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_P_Attendance", Storage="_S_User", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public S_User S_User
		{
			get
			{
				return this._S_User.Entity;
			}
			set
			{
				S_User previousValue = this._S_User.Entity;
				if (((previousValue != value) 
							|| (this._S_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_User.Entity = null;
						previousValue.P_Attendances.Remove(this);
					}
					this._S_User.Entity = value;
					if ((value != null))
					{
						value.P_Attendances.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("S_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Room_P_Attendance", Storage="_P_Room", ThisKey="roomId", OtherKey="id", IsForeignKey=true)]
		public P_Room P_Room
		{
			get
			{
				return this._P_Room.Entity;
			}
			set
			{
				P_Room previousValue = this._P_Room.Entity;
				if (((previousValue != value) 
							|| (this._P_Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_Room.Entity = null;
						previousValue.P_Attendances.Remove(this);
					}
					this._P_Room.Entity = value;
					if ((value != null))
					{
						value.P_Attendances.Add(this);
						this._roomId = value.id;
					}
					else
					{
						this._roomId = default(int);
					}
					this.SendPropertyChanged("P_Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.P_Room")]
	public partial class P_Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _RoomName;
		
		private string _RoomDesc;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private bool _status;
		
		private int _hostId;
		
		private string _password;
		
		private EntitySet<P_Attendance> _P_Attendances;
		
		private EntitySet<P_linkPresent> _P_linkPresents;
		
		private EntitySet<P_StatePresent> _P_StatePresents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnRoomDescChanging(string value);
    partial void OnRoomDescChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    partial void OnhostIdChanging(int value);
    partial void OnhostIdChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public P_Room()
		{
			this._P_Attendances = new EntitySet<P_Attendance>(new Action<P_Attendance>(this.attach_P_Attendances), new Action<P_Attendance>(this.detach_P_Attendances));
			this._P_linkPresents = new EntitySet<P_linkPresent>(new Action<P_linkPresent>(this.attach_P_linkPresents), new Action<P_linkPresent>(this.detach_P_linkPresents));
			this._P_StatePresents = new EntitySet<P_StatePresent>(new Action<P_StatePresent>(this.attach_P_StatePresents), new Action<P_StatePresent>(this.detach_P_StatePresents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomDesc", DbType="NVarChar(50)")]
		public string RoomDesc
		{
			get
			{
				return this._RoomDesc;
			}
			set
			{
				if ((this._RoomDesc != value))
				{
					this.OnRoomDescChanging(value);
					this.SendPropertyChanging();
					this._RoomDesc = value;
					this.SendPropertyChanged("RoomDesc");
					this.OnRoomDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hostId", DbType="Int NOT NULL")]
		public int hostId
		{
			get
			{
				return this._hostId;
			}
			set
			{
				if ((this._hostId != value))
				{
					this.OnhostIdChanging(value);
					this.SendPropertyChanging();
					this._hostId = value;
					this.SendPropertyChanged("hostId");
					this.OnhostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Room_P_Attendance", Storage="_P_Attendances", ThisKey="id", OtherKey="roomId")]
		public EntitySet<P_Attendance> P_Attendances
		{
			get
			{
				return this._P_Attendances;
			}
			set
			{
				this._P_Attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Room_P_linkPresent", Storage="_P_linkPresents", ThisKey="id", OtherKey="roomId")]
		public EntitySet<P_linkPresent> P_linkPresents
		{
			get
			{
				return this._P_linkPresents;
			}
			set
			{
				this._P_linkPresents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Room_P_StatePresent", Storage="_P_StatePresents", ThisKey="id", OtherKey="roomId")]
		public EntitySet<P_StatePresent> P_StatePresents
		{
			get
			{
				return this._P_StatePresents;
			}
			set
			{
				this._P_StatePresents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_P_Attendances(P_Attendance entity)
		{
			this.SendPropertyChanging();
			entity.P_Room = this;
		}
		
		private void detach_P_Attendances(P_Attendance entity)
		{
			this.SendPropertyChanging();
			entity.P_Room = null;
		}
		
		private void attach_P_linkPresents(P_linkPresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Room = this;
		}
		
		private void detach_P_linkPresents(P_linkPresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Room = null;
		}
		
		private void attach_P_StatePresents(P_StatePresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Room = this;
		}
		
		private void detach_P_StatePresents(P_StatePresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.P_Present")]
	public partial class P_Present : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _description;
		
		private System.Nullable<int> _roomid;
		
		private bool _status;
		
		private System.Nullable<int> _cateId;
		
		private int _ownerId;
		
		private EntitySet<P_linkPresent> _P_linkPresents;
		
		private EntitySet<P_StatePresent> _P_StatePresents;
		
		private EntitySet<N_savePresent> _N_savePresents;
		
		private EntitySet<N_Note> _N_Notes;
		
		private EntityRef<S_User> _S_User;
		
		private EntityRef<P_data> _P_data;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnroomidChanging(System.Nullable<int> value);
    partial void OnroomidChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    partial void OncateIdChanging(System.Nullable<int> value);
    partial void OncateIdChanged();
    partial void OnownerIdChanging(int value);
    partial void OnownerIdChanged();
    #endregion
		
		public P_Present()
		{
			this._P_linkPresents = new EntitySet<P_linkPresent>(new Action<P_linkPresent>(this.attach_P_linkPresents), new Action<P_linkPresent>(this.detach_P_linkPresents));
			this._P_StatePresents = new EntitySet<P_StatePresent>(new Action<P_StatePresent>(this.attach_P_StatePresents), new Action<P_StatePresent>(this.detach_P_StatePresents));
			this._N_savePresents = new EntitySet<N_savePresent>(new Action<N_savePresent>(this.attach_N_savePresents), new Action<N_savePresent>(this.detach_N_savePresents));
			this._N_Notes = new EntitySet<N_Note>(new Action<N_Note>(this.attach_N_Notes), new Action<N_Note>(this.detach_N_Notes));
			this._S_User = default(EntityRef<S_User>);
			this._P_data = default(EntityRef<P_data>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._P_data.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomid", DbType="Int")]
		public System.Nullable<int> roomid
		{
			get
			{
				return this._roomid;
			}
			set
			{
				if ((this._roomid != value))
				{
					this.OnroomidChanging(value);
					this.SendPropertyChanging();
					this._roomid = value;
					this.SendPropertyChanged("roomid");
					this.OnroomidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cateId", DbType="Int")]
		public System.Nullable<int> cateId
		{
			get
			{
				return this._cateId;
			}
			set
			{
				if ((this._cateId != value))
				{
					this.OncateIdChanging(value);
					this.SendPropertyChanging();
					this._cateId = value;
					this.SendPropertyChanged("cateId");
					this.OncateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ownerId", DbType="Int NOT NULL")]
		public int ownerId
		{
			get
			{
				return this._ownerId;
			}
			set
			{
				if ((this._ownerId != value))
				{
					if (this._S_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnownerIdChanging(value);
					this.SendPropertyChanging();
					this._ownerId = value;
					this.SendPropertyChanged("ownerId");
					this.OnownerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Present_P_linkPresent", Storage="_P_linkPresents", ThisKey="id", OtherKey="presentId")]
		public EntitySet<P_linkPresent> P_linkPresents
		{
			get
			{
				return this._P_linkPresents;
			}
			set
			{
				this._P_linkPresents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Present_P_StatePresent", Storage="_P_StatePresents", ThisKey="id", OtherKey="presentId")]
		public EntitySet<P_StatePresent> P_StatePresents
		{
			get
			{
				return this._P_StatePresents;
			}
			set
			{
				this._P_StatePresents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Present_N_savePresent", Storage="_N_savePresents", ThisKey="id", OtherKey="presentId")]
		public EntitySet<N_savePresent> N_savePresents
		{
			get
			{
				return this._N_savePresents;
			}
			set
			{
				this._N_savePresents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Present_N_Note", Storage="_N_Notes", ThisKey="id", OtherKey="presentId")]
		public EntitySet<N_Note> N_Notes
		{
			get
			{
				return this._N_Notes;
			}
			set
			{
				this._N_Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_P_Present", Storage="_S_User", ThisKey="ownerId", OtherKey="userId", IsForeignKey=true)]
		public S_User S_User
		{
			get
			{
				return this._S_User.Entity;
			}
			set
			{
				S_User previousValue = this._S_User.Entity;
				if (((previousValue != value) 
							|| (this._S_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_User.Entity = null;
						previousValue.P_Presents.Remove(this);
					}
					this._S_User.Entity = value;
					if ((value != null))
					{
						value.P_Presents.Add(this);
						this._ownerId = value.userId;
					}
					else
					{
						this._ownerId = default(int);
					}
					this.SendPropertyChanged("S_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_data_P_Present", Storage="_P_data", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public P_data P_data
		{
			get
			{
				return this._P_data.Entity;
			}
			set
			{
				P_data previousValue = this._P_data.Entity;
				if (((previousValue != value) 
							|| (this._P_data.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_data.Entity = null;
						previousValue.P_Presents = null;
					}
					this._P_data.Entity = value;
					if ((value != null))
					{
						value.P_Presents = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("P_data");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_P_linkPresents(P_linkPresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Present = this;
		}
		
		private void detach_P_linkPresents(P_linkPresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Present = null;
		}
		
		private void attach_P_StatePresents(P_StatePresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Present = this;
		}
		
		private void detach_P_StatePresents(P_StatePresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Present = null;
		}
		
		private void attach_N_savePresents(N_savePresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Present = this;
		}
		
		private void detach_N_savePresents(N_savePresent entity)
		{
			this.SendPropertyChanging();
			entity.P_Present = null;
		}
		
		private void attach_N_Notes(N_Note entity)
		{
			this.SendPropertyChanging();
			entity.P_Present = this;
		}
		
		private void detach_N_Notes(N_Note entity)
		{
			this.SendPropertyChanging();
			entity.P_Present = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.P_data")]
	public partial class P_data : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Data.Linq.Binary _data;
		
		private int _tempId;
		
		private EntityRef<P_Present> _P_Presents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndataChanging(System.Data.Linq.Binary value);
    partial void OndataChanged();
    partial void OntempIdChanging(int value);
    partial void OntempIdChanged();
    #endregion
		
		public P_data()
		{
			this._P_Presents = default(EntityRef<P_Present>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tempId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int tempId
		{
			get
			{
				return this._tempId;
			}
			set
			{
				if ((this._tempId != value))
				{
					this.OntempIdChanging(value);
					this.SendPropertyChanging();
					this._tempId = value;
					this.SendPropertyChanged("tempId");
					this.OntempIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_data_P_Present", Storage="_P_Presents", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public P_Present P_Presents
		{
			get
			{
				return this._P_Presents.Entity;
			}
			set
			{
				P_Present previousValue = this._P_Presents.Entity;
				if (((previousValue != value) 
							|| (this._P_Presents.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_Presents.Entity = null;
						previousValue.P_data = null;
					}
					this._P_Presents.Entity = value;
					if ((value != null))
					{
						value.P_data = this;
					}
					this.SendPropertyChanged("P_Presents");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.P_linkPresent")]
	public partial class P_linkPresent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _roomId;
		
		private int _presentId;
		
		private EntityRef<P_Present> _P_Present;
		
		private EntityRef<P_Room> _P_Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void OnpresentIdChanging(int value);
    partial void OnpresentIdChanged();
    #endregion
		
		public P_linkPresent()
		{
			this._P_Present = default(EntityRef<P_Present>);
			this._P_Room = default(EntityRef<P_Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL")]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					if (this._P_Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentId", DbType="Int NOT NULL")]
		public int presentId
		{
			get
			{
				return this._presentId;
			}
			set
			{
				if ((this._presentId != value))
				{
					if (this._P_Present.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpresentIdChanging(value);
					this.SendPropertyChanging();
					this._presentId = value;
					this.SendPropertyChanged("presentId");
					this.OnpresentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Present_P_linkPresent", Storage="_P_Present", ThisKey="presentId", OtherKey="id", IsForeignKey=true)]
		public P_Present P_Present
		{
			get
			{
				return this._P_Present.Entity;
			}
			set
			{
				P_Present previousValue = this._P_Present.Entity;
				if (((previousValue != value) 
							|| (this._P_Present.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_Present.Entity = null;
						previousValue.P_linkPresents.Remove(this);
					}
					this._P_Present.Entity = value;
					if ((value != null))
					{
						value.P_linkPresents.Add(this);
						this._presentId = value.id;
					}
					else
					{
						this._presentId = default(int);
					}
					this.SendPropertyChanged("P_Present");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Room_P_linkPresent", Storage="_P_Room", ThisKey="roomId", OtherKey="id", IsForeignKey=true)]
		public P_Room P_Room
		{
			get
			{
				return this._P_Room.Entity;
			}
			set
			{
				P_Room previousValue = this._P_Room.Entity;
				if (((previousValue != value) 
							|| (this._P_Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_Room.Entity = null;
						previousValue.P_linkPresents.Remove(this);
					}
					this._P_Room.Entity = value;
					if ((value != null))
					{
						value.P_linkPresents.Add(this);
						this._roomId = value.id;
					}
					else
					{
						this._roomId = default(int);
					}
					this.SendPropertyChanged("P_Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.P_StatePresent")]
	public partial class P_StatePresent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _presentId;
		
		private System.Nullable<int> _roomId;
		
		private int _currentPage;
		
		private bool _status;
		
		private EntityRef<P_Present> _P_Present;
		
		private EntityRef<P_Room> _P_Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpresentIdChanging(int value);
    partial void OnpresentIdChanged();
    partial void OnroomIdChanging(System.Nullable<int> value);
    partial void OnroomIdChanged();
    partial void OncurrentPageChanging(int value);
    partial void OncurrentPageChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    #endregion
		
		public P_StatePresent()
		{
			this._P_Present = default(EntityRef<P_Present>);
			this._P_Room = default(EntityRef<P_Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentId", DbType="Int NOT NULL")]
		public int presentId
		{
			get
			{
				return this._presentId;
			}
			set
			{
				if ((this._presentId != value))
				{
					if (this._P_Present.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpresentIdChanging(value);
					this.SendPropertyChanging();
					this._presentId = value;
					this.SendPropertyChanged("presentId");
					this.OnpresentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int")]
		public System.Nullable<int> roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					if (this._P_Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentPage", DbType="Int NOT NULL")]
		public int currentPage
		{
			get
			{
				return this._currentPage;
			}
			set
			{
				if ((this._currentPage != value))
				{
					this.OncurrentPageChanging(value);
					this.SendPropertyChanging();
					this._currentPage = value;
					this.SendPropertyChanged("currentPage");
					this.OncurrentPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Present_P_StatePresent", Storage="_P_Present", ThisKey="presentId", OtherKey="id", IsForeignKey=true)]
		public P_Present P_Present
		{
			get
			{
				return this._P_Present.Entity;
			}
			set
			{
				P_Present previousValue = this._P_Present.Entity;
				if (((previousValue != value) 
							|| (this._P_Present.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_Present.Entity = null;
						previousValue.P_StatePresents.Remove(this);
					}
					this._P_Present.Entity = value;
					if ((value != null))
					{
						value.P_StatePresents.Add(this);
						this._presentId = value.id;
					}
					else
					{
						this._presentId = default(int);
					}
					this.SendPropertyChanged("P_Present");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Room_P_StatePresent", Storage="_P_Room", ThisKey="roomId", OtherKey="id", IsForeignKey=true)]
		public P_Room P_Room
		{
			get
			{
				return this._P_Room.Entity;
			}
			set
			{
				P_Room previousValue = this._P_Room.Entity;
				if (((previousValue != value) 
							|| (this._P_Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_Room.Entity = null;
						previousValue.P_StatePresents.Remove(this);
					}
					this._P_Room.Entity = value;
					if ((value != null))
					{
						value.P_StatePresents.Add(this);
						this._roomId = value.id;
					}
					else
					{
						this._roomId = default(Nullable<int>);
					}
					this.SendPropertyChanged("P_Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Q_Answer")]
	public partial class Q_Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _questionId;
		
		private string _content;
		
		private int _userId;
		
		private EntityRef<Q_question> _Q_question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnquestionIdChanging(int value);
    partial void OnquestionIdChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    #endregion
		
		public Q_Answer()
		{
			this._Q_question = default(EntityRef<Q_question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionId", DbType="Int NOT NULL")]
		public int questionId
		{
			get
			{
				return this._questionId;
			}
			set
			{
				if ((this._questionId != value))
				{
					if (this._Q_question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionIdChanging(value);
					this.SendPropertyChanging();
					this._questionId = value;
					this.SendPropertyChanged("questionId");
					this.OnquestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Q_question_Q_Answer", Storage="_Q_question", ThisKey="questionId", OtherKey="id", IsForeignKey=true)]
		public Q_question Q_question
		{
			get
			{
				return this._Q_question.Entity;
			}
			set
			{
				Q_question previousValue = this._Q_question.Entity;
				if (((previousValue != value) 
							|| (this._Q_question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Q_question.Entity = null;
						previousValue.Q_Answers.Remove(this);
					}
					this._Q_question.Entity = value;
					if ((value != null))
					{
						value.Q_Answers.Add(this);
						this._questionId = value.id;
					}
					else
					{
						this._questionId = default(int);
					}
					this.SendPropertyChanged("Q_question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Q_question")]
	public partial class Q_question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userId;
		
		private string _content;
		
		private int _currentPage;
		
		private int _presentId;
		
		private int _roomId;
		
		private EntitySet<Q_Answer> _Q_Answers;
		
		private EntityRef<S_User> _S_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OncurrentPageChanging(int value);
    partial void OncurrentPageChanged();
    partial void OnpresentIdChanging(int value);
    partial void OnpresentIdChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    #endregion
		
		public Q_question()
		{
			this._Q_Answers = new EntitySet<Q_Answer>(new Action<Q_Answer>(this.attach_Q_Answers), new Action<Q_Answer>(this.detach_Q_Answers));
			this._S_User = default(EntityRef<S_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._S_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentPage", DbType="Int NOT NULL")]
		public int currentPage
		{
			get
			{
				return this._currentPage;
			}
			set
			{
				if ((this._currentPage != value))
				{
					this.OncurrentPageChanging(value);
					this.SendPropertyChanging();
					this._currentPage = value;
					this.SendPropertyChanged("currentPage");
					this.OncurrentPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentId", DbType="Int NOT NULL")]
		public int presentId
		{
			get
			{
				return this._presentId;
			}
			set
			{
				if ((this._presentId != value))
				{
					this.OnpresentIdChanging(value);
					this.SendPropertyChanging();
					this._presentId = value;
					this.SendPropertyChanged("presentId");
					this.OnpresentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL")]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Q_question_Q_Answer", Storage="_Q_Answers", ThisKey="id", OtherKey="questionId")]
		public EntitySet<Q_Answer> Q_Answers
		{
			get
			{
				return this._Q_Answers;
			}
			set
			{
				this._Q_Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_Q_question", Storage="_S_User", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public S_User S_User
		{
			get
			{
				return this._S_User.Entity;
			}
			set
			{
				S_User previousValue = this._S_User.Entity;
				if (((previousValue != value) 
							|| (this._S_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_User.Entity = null;
						previousValue.Q_questions.Remove(this);
					}
					this._S_User.Entity = value;
					if ((value != null))
					{
						value.Q_questions.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("S_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Q_Answers(Q_Answer entity)
		{
			this.SendPropertyChanging();
			entity.Q_question = this;
		}
		
		private void detach_Q_Answers(Q_Answer entity)
		{
			this.SendPropertyChanging();
			entity.Q_question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.P_request")]
	public partial class P_request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userId;
		
		private int _roomId;
		
		private string _request;
		
		private bool _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void OnrequestChanging(string value);
    partial void OnrequestChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    #endregion
		
		public P_request()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL")]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_request", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string request
		{
			get
			{
				return this._request;
			}
			set
			{
				if ((this._request != value))
				{
					this.OnrequestChanging(value);
					this.SendPropertyChanging();
					this._request = value;
					this.SendPropertyChanged("request");
					this.OnrequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.N_savePresent")]
	public partial class N_savePresent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userId;
		
		private int _presentId;
		
		private EntityRef<P_Present> _P_Present;
		
		private EntityRef<S_User> _S_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnpresentIdChanging(int value);
    partial void OnpresentIdChanged();
    #endregion
		
		public N_savePresent()
		{
			this._P_Present = default(EntityRef<P_Present>);
			this._S_User = default(EntityRef<S_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._S_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentId", DbType="Int NOT NULL")]
		public int presentId
		{
			get
			{
				return this._presentId;
			}
			set
			{
				if ((this._presentId != value))
				{
					if (this._P_Present.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpresentIdChanging(value);
					this.SendPropertyChanging();
					this._presentId = value;
					this.SendPropertyChanged("presentId");
					this.OnpresentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Present_N_savePresent", Storage="_P_Present", ThisKey="presentId", OtherKey="id", IsForeignKey=true)]
		public P_Present P_Present
		{
			get
			{
				return this._P_Present.Entity;
			}
			set
			{
				P_Present previousValue = this._P_Present.Entity;
				if (((previousValue != value) 
							|| (this._P_Present.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_Present.Entity = null;
						previousValue.N_savePresents.Remove(this);
					}
					this._P_Present.Entity = value;
					if ((value != null))
					{
						value.N_savePresents.Add(this);
						this._presentId = value.id;
					}
					else
					{
						this._presentId = default(int);
					}
					this.SendPropertyChanged("P_Present");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_N_savePresent", Storage="_S_User", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public S_User S_User
		{
			get
			{
				return this._S_User.Entity;
			}
			set
			{
				S_User previousValue = this._S_User.Entity;
				if (((previousValue != value) 
							|| (this._S_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_User.Entity = null;
						previousValue.N_savePresents.Remove(this);
					}
					this._S_User.Entity = value;
					if ((value != null))
					{
						value.N_savePresents.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("S_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.N_Note")]
	public partial class N_Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _content;
		
		private int _userId;
		
		private int _presentId;
		
		private int _page;
		
		private EntityRef<P_Present> _P_Present;
		
		private EntityRef<S_User> _S_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnpresentIdChanging(int value);
    partial void OnpresentIdChanged();
    partial void OnpageChanging(int value);
    partial void OnpageChanged();
    #endregion
		
		public N_Note()
		{
			this._P_Present = default(EntityRef<P_Present>);
			this._S_User = default(EntityRef<S_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._S_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentId", DbType="Int NOT NULL")]
		public int presentId
		{
			get
			{
				return this._presentId;
			}
			set
			{
				if ((this._presentId != value))
				{
					if (this._P_Present.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpresentIdChanging(value);
					this.SendPropertyChanging();
					this._presentId = value;
					this.SendPropertyChanged("presentId");
					this.OnpresentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_page", DbType="Int NOT NULL")]
		public int page
		{
			get
			{
				return this._page;
			}
			set
			{
				if ((this._page != value))
				{
					this.OnpageChanging(value);
					this.SendPropertyChanging();
					this._page = value;
					this.SendPropertyChanged("page");
					this.OnpageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="P_Present_N_Note", Storage="_P_Present", ThisKey="presentId", OtherKey="id", IsForeignKey=true)]
		public P_Present P_Present
		{
			get
			{
				return this._P_Present.Entity;
			}
			set
			{
				P_Present previousValue = this._P_Present.Entity;
				if (((previousValue != value) 
							|| (this._P_Present.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._P_Present.Entity = null;
						previousValue.N_Notes.Remove(this);
					}
					this._P_Present.Entity = value;
					if ((value != null))
					{
						value.N_Notes.Add(this);
						this._presentId = value.id;
					}
					else
					{
						this._presentId = default(int);
					}
					this.SendPropertyChanged("P_Present");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_User_N_Note", Storage="_S_User", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public S_User S_User
		{
			get
			{
				return this._S_User.Entity;
			}
			set
			{
				S_User previousValue = this._S_User.Entity;
				if (((previousValue != value) 
							|| (this._S_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_User.Entity = null;
						previousValue.N_Notes.Remove(this);
					}
					this._S_User.Entity = value;
					if ((value != null))
					{
						value.N_Notes.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("S_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
